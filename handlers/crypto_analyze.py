from aiogram import Router, F
from aiogram.types import Message
from utils.coingecko_service import (
    get_current_price, 
    get_history_data, 
    get_daily_summary,
    get_market_indicators,
    get_price_alerts,
    format_number
)


router = Router()


@router.message(F.text.startswith("/price"))
async def get_price(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price coin_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""

    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ: /price bitcoin")
        return

    coin_id = parts[1].lower().strip()

    price = get_current_price(coin_id)
    if price is None:
        await message.reply(f"–ú–æ–Ω–µ—Ç–∞ —Å id {coin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await message.reply(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {coin_id}: ${format_number(price)} USD")


@router.message(F.text.startswith("/daily"))
async def daily_summary(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily coin_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
    
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ: /daily bitcoin")
        return

    coin_id = parts[1].lower().strip()
    
    summary = get_daily_summary(coin_id)
    if summary is None:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã {coin_id}")
        return
    
    response = f"üìä –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ {coin_id}:\n\n"
    response += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${format_number(summary['current_price'])}\n"
    response += f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${format_number(summary['min_price'])}\n"
    response += f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${format_number(summary['max_price'])}\n"
    response += f"üìä –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ${format_number(summary['total_volume'])}"
    
    await message.reply(response)


@router.message(F.text.startswith("/analyze"))
async def analyze_market(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze coin_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ: /analyze bitcoin")
        return

    coin_id = parts[1].lower().strip()
    
    indicators = get_market_indicators(coin_id)
    if indicators is None:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã {coin_id}")
        return
    
    response = f"üìä –ê–Ω–∞–ª–∏–∑ {coin_id}:\n\n"
    response += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${format_number(indicators['current_price'])}\n"
    response += f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${format_number(indicators['average_price'])}\n"
    response += f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {format_number(indicators['price_change'])}%\n"
    response += f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {format_number(indicators['volatility_percent'])}%\n"
    response += f"üíπ SMA: ${format_number(indicators['sma'])}\n"
    response += f"üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${format_number(indicators['average_volume'])}\n"
    response += f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${format_number(indicators['max_volume'])}"
    
    await message.reply(response)


@router.message(F.text.startswith("/alerts"))
async def price_alerts(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alerts coin_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ: /alerts bitcoin")
        return

    coin_id = parts[1].lower().strip()
    
    analysis = get_price_alerts(coin_id)
    if analysis is None:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã {coin_id}")
        return
    
    indicators = analysis["indicators"]
    alerts = analysis["alerts"]
    
    response = f"üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {coin_id}:\n\n"
    
    if alerts:
        response += "\n".join(alerts)
    else:
        response += "üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
    
    response += f"\n\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${format_number(indicators['current_price'])}"
    
    await message.reply(response)